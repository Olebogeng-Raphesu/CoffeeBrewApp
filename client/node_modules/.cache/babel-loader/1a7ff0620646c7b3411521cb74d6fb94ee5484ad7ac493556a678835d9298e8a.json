{"ast":null,"code":"const API_URL = '/api/brews';\nexport async function getBrews(method) {\n  const url = method ? `${API_URL}?method=${encodeURIComponent(method)}` : API_URL;\n  const res = await fetch(url);\n  if (!res.ok) throw new Error('Failed to fetch brews');\n  return res.json();\n}\nexport async function createBrew(brew) {\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(brew)\n  });\n  if (!res.ok) throw new Error('Failed to create brew');\n  return res.json();\n}\nexport async function updateBrew(id, brew) {\n  const res = await fetch(`${API_URL}/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(brew)\n  });\n  if (!res.ok) throw new Error('Failed to update brew');\n  return res.json();\n}\nexport async function deleteBrew(id) {\n  const res = await fetch(`${API_URL}/${id}`, {\n    method: 'DELETE'\n  });\n  if (!res.ok) throw new Error('Failed to delete brew');\n}","map":{"version":3,"names":["API_URL","getBrews","method","url","encodeURIComponent","res","fetch","ok","Error","json","createBrew","brew","headers","body","JSON","stringify","updateBrew","id","deleteBrew"],"sources":["C:/Users/olebo/OneDrive/Documents/Web_Projects/SimpleSuperDev-React/CoffeeBrewApp/coffee-brew-log-app/frontend/src/api/brews.js"],"sourcesContent":["const API_URL = '/api/brews';\r\n\r\nexport async function getBrews(method) {\r\n    const url = method ? `${API_URL}?method=${encodeURIComponent(method)}` : API_URL;\r\n    const res = await fetch(url);\r\n    if (!res.ok) throw new Error('Failed to fetch brews');\r\n    return res.json();\r\n}\r\n\r\nexport async function createBrew(brew) {\r\n    const res = await fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(brew),\r\n    });\r\n    if (!res.ok) throw new Error('Failed to create brew');\r\n    return res.json();\r\n}\r\n\r\nexport async function updateBrew(id, brew) {\r\n    const res = await fetch(`${API_URL}/${id}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(brew),\r\n    });\r\n    if (!res.ok) throw new Error('Failed to update brew');\r\n    return res.json();\r\n}\r\n\r\nexport async function deleteBrew(id) {\r\n    const res = await fetch(`${API_URL}/${id}`, { method: 'DELETE' });\r\n    if (!res.ok) throw new Error('Failed to delete brew');\r\n}"],"mappings":"AAAA,MAAMA,OAAO,GAAG,YAAY;AAE5B,OAAO,eAAeC,QAAQA,CAACC,MAAM,EAAE;EACnC,MAAMC,GAAG,GAAGD,MAAM,GAAG,GAAGF,OAAO,WAAWI,kBAAkB,CAACF,MAAM,CAAC,EAAE,GAAGF,OAAO;EAChF,MAAMK,GAAG,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;EAC5B,IAAI,CAACE,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EACrD,OAAOH,GAAG,CAACI,IAAI,CAAC,CAAC;AACrB;AAEA,OAAO,eAAeC,UAAUA,CAACC,IAAI,EAAE;EACnC,MAAMN,GAAG,GAAG,MAAMC,KAAK,CAACN,OAAO,EAAE;IAC7BE,MAAM,EAAE,MAAM;IACdU,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI;EAC7B,CAAC,CAAC;EACF,IAAI,CAACN,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EACrD,OAAOH,GAAG,CAACI,IAAI,CAAC,CAAC;AACrB;AAEA,OAAO,eAAeO,UAAUA,CAACC,EAAE,EAAEN,IAAI,EAAE;EACvC,MAAMN,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,IAAIiB,EAAE,EAAE,EAAE;IACxCf,MAAM,EAAE,KAAK;IACbU,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI;EAC7B,CAAC,CAAC;EACF,IAAI,CAACN,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EACrD,OAAOH,GAAG,CAACI,IAAI,CAAC,CAAC;AACrB;AAEA,OAAO,eAAeS,UAAUA,CAACD,EAAE,EAAE;EACjC,MAAMZ,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,IAAIiB,EAAE,EAAE,EAAE;IAAEf,MAAM,EAAE;EAAS,CAAC,CAAC;EACjE,IAAI,CAACG,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;AACzD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}